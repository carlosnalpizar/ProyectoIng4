{"ast":null,"code":"import axios from \"axios\";\n\n// Endpoint para obtener el último número de préstamo\napp.get('/prestamos/ultimoprestamo', async (req, res) => {\n  try {\n    var _result$;\n    const result = await db.query('SELECT MAX(numeroPrestamo) AS ultimoPrestamo FROM prestamos');\n    const ultimoNumeroPrestamo = ((_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.ultimoPrestamo) || 'PT30050'; // Valor predeterminado si no existe\n    res.json({\n      ultimoNumeroPrestamo\n    });\n  } catch (error) {\n    console.error(\"Error al obtener el último préstamo:\", error);\n    res.status(500).send('Error al obtener el último préstamo');\n  }\n});\n\n// Endpoint para insertar un nuevo préstamo\napp.post('/prestamos/nuevoPrestamo', async (req, res) => {\n  const {\n    monto,\n    plazoMeses,\n    fechaInicio,\n    numeroPrestamo,\n    tasaInteresMoratoria,\n    fechaVencimiento,\n    diaPago,\n    IdClientes,\n    clientesPersonaCedula,\n    estadoPrestamo\n  } = req.body;\n  try {\n    var _result$2;\n    // Generación del nuevo número de préstamo basado en el último número\n    const result = await db.query('SELECT MAX(numeroPrestamo) AS ultimoPrestamo FROM prestamos');\n    let nuevoNumeroPrestamo = 'PT' + (parseInt((_result$2 = result[0]) === null || _result$2 === void 0 ? void 0 : _result$2.ultimoPrestamo.replace('PT', ''), 10) + 1).toString();\n\n    // Insertar el nuevo préstamo\n    await db.query('INSERT INTO prestamos (monto, plazoMeses, fechaInicio, numeroPrestamo, tasaInteresMoratoria, fechaVencimiento, diaPago, IdClientes, clientesPersonaCedula, estadoPrestamo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [monto, plazoMeses, fechaInicio, nuevoNumeroPrestamo, tasaInteresMoratoria, fechaVencimiento, diaPago, IdClientes, clientesPersonaCedula, estadoPrestamo]);\n    res.json({\n      success: true,\n      numeroPrestamo: nuevoNumeroPrestamo\n    });\n  } catch (error) {\n    console.error(\"Error al insertar el préstamo:\", error);\n    res.status(500).send('Error al insertar el préstamo');\n  }\n});","map":{"version":3,"names":["axios","app","get","req","res","_result$","result","db","query","ultimoNumeroPrestamo","ultimoPrestamo","json","error","console","status","send","post","monto","plazoMeses","fechaInicio","numeroPrestamo","tasaInteresMoratoria","fechaVencimiento","diaPago","IdClientes","clientesPersonaCedula","estadoPrestamo","body","_result$2","nuevoNumeroPrestamo","parseInt","replace","toString","success"],"sources":["C:/Users/anabq/OneDrive/Documentos/ProyectoIng4/frontend/src/api/RegistrarPrestamo.api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Endpoint para obtener el último número de préstamo\r\napp.get('/prestamos/ultimoprestamo', async (req, res) => {\r\n    try {\r\n      const result = await db.query('SELECT MAX(numeroPrestamo) AS ultimoPrestamo FROM prestamos');\r\n      const ultimoNumeroPrestamo = result[0]?.ultimoPrestamo || 'PT30050'; // Valor predeterminado si no existe\r\n      res.json({ ultimoNumeroPrestamo });\r\n    } catch (error) {\r\n      console.error(\"Error al obtener el último préstamo:\", error);\r\n      res.status(500).send('Error al obtener el último préstamo');\r\n    }\r\n  });\r\n  \r\n  // Endpoint para insertar un nuevo préstamo\r\n  app.post('/prestamos/nuevoPrestamo', async (req, res) => {\r\n    const {\r\n      monto,\r\n      plazoMeses,\r\n      fechaInicio,\r\n      numeroPrestamo,\r\n      tasaInteresMoratoria,\r\n      fechaVencimiento,\r\n      diaPago,\r\n      IdClientes,\r\n      clientesPersonaCedula,\r\n      estadoPrestamo,\r\n    } = req.body;\r\n  \r\n    try {\r\n      // Generación del nuevo número de préstamo basado en el último número\r\n      const result = await db.query('SELECT MAX(numeroPrestamo) AS ultimoPrestamo FROM prestamos');\r\n      let nuevoNumeroPrestamo = 'PT' + (parseInt(result[0]?.ultimoPrestamo.replace('PT', ''), 10) + 1).toString();\r\n  \r\n      // Insertar el nuevo préstamo\r\n      await db.query('INSERT INTO prestamos (monto, plazoMeses, fechaInicio, numeroPrestamo, tasaInteresMoratoria, fechaVencimiento, diaPago, IdClientes, clientesPersonaCedula, estadoPrestamo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [\r\n        monto,\r\n        plazoMeses,\r\n        fechaInicio,\r\n        nuevoNumeroPrestamo,\r\n        tasaInteresMoratoria,\r\n        fechaVencimiento,\r\n        diaPago,\r\n        IdClientes,\r\n        clientesPersonaCedula,\r\n        estadoPrestamo\r\n      ]);\r\n  \r\n      res.json({ success: true, numeroPrestamo: nuevoNumeroPrestamo });\r\n    } catch (error) {\r\n      console.error(\"Error al insertar el préstamo:\", error);\r\n      res.status(500).send('Error al insertar el préstamo');\r\n    }\r\n  });\r\n  \r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAC,GAAG,CAACC,GAAG,CAAC,2BAA2B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrD,IAAI;IAAA,IAAAC,QAAA;IACF,MAAMC,MAAM,GAAG,MAAMC,EAAE,CAACC,KAAK,CAAC,6DAA6D,CAAC;IAC5F,MAAMC,oBAAoB,GAAG,EAAAJ,QAAA,GAAAC,MAAM,CAAC,CAAC,CAAC,cAAAD,QAAA,uBAATA,QAAA,CAAWK,cAAc,KAAI,SAAS,CAAC,CAAC;IACrEN,GAAG,CAACO,IAAI,CAAC;MAAEF;IAAqB,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5DR,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;EAC7D;AACF,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACe,IAAI,CAAC,0BAA0B,EAAE,OAAOb,GAAG,EAAEC,GAAG,KAAK;EACvD,MAAM;IACJa,KAAK;IACLC,UAAU;IACVC,WAAW;IACXC,cAAc;IACdC,oBAAoB;IACpBC,gBAAgB;IAChBC,OAAO;IACPC,UAAU;IACVC,qBAAqB;IACrBC;EACF,CAAC,GAAGvB,GAAG,CAACwB,IAAI;EAEZ,IAAI;IAAA,IAAAC,SAAA;IACF;IACA,MAAMtB,MAAM,GAAG,MAAMC,EAAE,CAACC,KAAK,CAAC,6DAA6D,CAAC;IAC5F,IAAIqB,mBAAmB,GAAG,IAAI,GAAG,CAACC,QAAQ,EAAAF,SAAA,GAACtB,MAAM,CAAC,CAAC,CAAC,cAAAsB,SAAA,uBAATA,SAAA,CAAWlB,cAAc,CAACqB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;;IAE3G;IACA,MAAMzB,EAAE,CAACC,KAAK,CAAC,kNAAkN,EAAE,CACjOS,KAAK,EACLC,UAAU,EACVC,WAAW,EACXU,mBAAmB,EACnBR,oBAAoB,EACpBC,gBAAgB,EAChBC,OAAO,EACPC,UAAU,EACVC,qBAAqB,EACrBC,cAAc,CACf,CAAC;IAEFtB,GAAG,CAACO,IAAI,CAAC;MAAEsB,OAAO,EAAE,IAAI;MAAEb,cAAc,EAAES;IAAoB,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtDR,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,+BAA+B,CAAC;EACvD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}